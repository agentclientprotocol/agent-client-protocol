// Code generated by acp-go-generator; DO NOT EDIT.

package acp

import "encoding/json"

func (a *AgentSideConnection) handle(method string, params json.RawMessage) (any, *RequestError) {
	switch method {
	case AgentMethodAuthenticate:
		var p AuthenticateRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := a.agent.Authenticate(p); err != nil {
			return nil, toReqErr(err)
		}
		return nil, nil
	case AgentMethodInitialize:
		var p InitializeRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := a.agent.Initialize(p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case AgentMethodSessionCancel:
		var p CancelNotification
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := a.agent.Cancel(p); err != nil {
			return nil, toReqErr(err)
		}
		return nil, nil
	case AgentMethodSessionLoad:
		var p LoadSessionRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := a.agent.LoadSession(p); err != nil {
			return nil, toReqErr(err)
		}
		return nil, nil
	case AgentMethodSessionNew:
		var p NewSessionRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := a.agent.NewSession(p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case AgentMethodSessionPrompt:
		var p PromptRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := a.agent.Prompt(p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	default:
		return nil, NewMethodNotFound(method)
	}
}
func (c *AgentSideConnection) ReadTextFile(params ReadTextFileRequest) (ReadTextFileResponse, error) {
	resp, err := SendRequest[ReadTextFileResponse](c.conn, ClientMethodFsReadTextFile, params)
	return resp, err
}
func (c *AgentSideConnection) SessionUpdate(params SessionNotification) error {
	return c.conn.SendNotification(ClientMethodSessionUpdate, params)
}
func (c *AgentSideConnection) WriteTextFile(params WriteTextFileRequest) error {
	return c.conn.SendRequestNoResult(ClientMethodFsWriteTextFile, params)
}
func (c *AgentSideConnection) RequestPermission(params RequestPermissionRequest) (RequestPermissionResponse, error) {
	resp, err := SendRequest[RequestPermissionResponse](c.conn, ClientMethodSessionRequestPermission, params)
	return resp, err
}
