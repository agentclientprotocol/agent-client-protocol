// Code generated by acp-go-generator; DO NOT EDIT.

package acp

import "encoding/json"

func (c *ClientSideConnection) handle(method string, params json.RawMessage) (any, *RequestError) {
	switch method {
	case ClientMethodFsReadTextFile:
		var p ReadTextFileRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.ReadTextFile(p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodFsWriteTextFile:
		var p WriteTextFileRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := c.client.WriteTextFile(p); err != nil {
			return nil, toReqErr(err)
		}
		return nil, nil
	case ClientMethodSessionRequestPermission:
		var p RequestPermissionRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		resp, err := c.client.RequestPermission(p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodSessionUpdate:
		var p SessionNotification
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := c.client.SessionUpdate(p); err != nil {
			return nil, toReqErr(err)
		}
		return nil, nil
	case ClientMethodTerminalCreate:
		var p CreateTerminalRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		t, ok := c.client.(ClientTerminal)
		if !ok {
			return nil, NewMethodNotFound(method)
		}
		resp, err := t.CreateTerminal(p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodTerminalOutput:
		var p TerminalOutputRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		t, ok := c.client.(ClientTerminal)
		if !ok {
			return nil, NewMethodNotFound(method)
		}
		resp, err := t.TerminalOutput(p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	case ClientMethodTerminalRelease:
		var p ReleaseTerminalRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		t, ok := c.client.(ClientTerminal)
		if !ok {
			return nil, NewMethodNotFound(method)
		}
		if err := t.ReleaseTerminal(p); err != nil {
			return nil, toReqErr(err)
		}
		return nil, nil
	case ClientMethodTerminalWaitForExit:
		var p WaitForTerminalExitRequest
		if err := json.Unmarshal(params, &p); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		if err := p.Validate(); err != nil {
			return nil, NewInvalidParams(map[string]any{"error": err.Error()})
		}
		t, ok := c.client.(ClientTerminal)
		if !ok {
			return nil, NewMethodNotFound(method)
		}
		resp, err := t.WaitForTerminalExit(p)
		if err != nil {
			return nil, toReqErr(err)
		}
		return resp, nil
	default:
		return nil, NewMethodNotFound(method)
	}
}
func (c *ClientSideConnection) Authenticate(params AuthenticateRequest) error {
	return c.conn.SendRequestNoResult(AgentMethodAuthenticate, params)
}
func (c *ClientSideConnection) Initialize(params InitializeRequest) (InitializeResponse, error) {
	resp, err := SendRequest[InitializeResponse](c.conn, AgentMethodInitialize, params)
	return resp, err
}
func (c *ClientSideConnection) Cancel(params CancelNotification) error {
	return c.conn.SendNotification(AgentMethodSessionCancel, params)
}
func (c *ClientSideConnection) LoadSession(params LoadSessionRequest) error {
	return c.conn.SendRequestNoResult(AgentMethodSessionLoad, params)
}
func (c *ClientSideConnection) NewSession(params NewSessionRequest) (NewSessionResponse, error) {
	resp, err := SendRequest[NewSessionResponse](c.conn, AgentMethodSessionNew, params)
	return resp, err
}
func (c *ClientSideConnection) Prompt(params PromptRequest) (PromptResponse, error) {
	resp, err := SendRequest[PromptResponse](c.conn, AgentMethodSessionPrompt, params)
	return resp, err
}
