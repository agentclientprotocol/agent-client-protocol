package emit

import (
	"bytes"
	"os"
	"path/filepath"

	"github.com/zed-industries/agent-client-protocol/go/cmd/generate/internal/load"
)

// WriteHelpersJen emits go/helpers_gen.go with small constructor helpers
// for common union variants and a Ptr generic helper.
func WriteHelpersJen(outDir string, _ *load.Schema, _ *load.Meta) error {
	f := NewFile("acp")
	f.HeaderComment("Code generated by acp-go-generator; DO NOT EDIT.")

	// Content helpers
	f.Comment("TextBlock constructs a text content block.")
	f.Func().Id("TextBlock").Params(Id("text").String()).Id("ContentBlock").Block(
		Return(Id("ContentBlock").Values(Dict{
			Id("Type"): Lit("text"),
			Id("Text"): Op("&").Id("TextContent").Values(Dict{Id("Text"): Id("text")}),
		})),
	)
	f.Line()

	f.Comment("ImageBlock constructs an inline image content block with base64-encoded data.")
	f.Func().Id("ImageBlock").Params(Id("data").String(), Id("mimeType").String()).Id("ContentBlock").Block(
		Return(Id("ContentBlock").Values(Dict{
			Id("Type"):  Lit("image"),
			Id("Image"): Op("&").Id("ImageContent").Values(Dict{Id("Data"): Id("data"), Id("MimeType"): Id("mimeType")}),
		})),
	)
	f.Line()

	f.Comment("AudioBlock constructs an inline audio content block with base64-encoded data.")
	f.Func().Id("AudioBlock").Params(Id("data").String(), Id("mimeType").String()).Id("ContentBlock").Block(
		Return(Id("ContentBlock").Values(Dict{
			Id("Type"):  Lit("audio"),
			Id("Audio"): Op("&").Id("AudioContent").Values(Dict{Id("Data"): Id("data"), Id("MimeType"): Id("mimeType")}),
		})),
	)
	f.Line()

	f.Comment("ResourceLinkBlock constructs a resource_link content block with a name and URI.")
	f.Func().Id("ResourceLinkBlock").Params(Id("name").String(), Id("uri").String()).Id("ContentBlock").Block(
		Return(Id("ContentBlock").Values(Dict{
			Id("Type"):         Lit("resource_link"),
			Id("ResourceLink"): Op("&").Id("ResourceLinkContent").Values(Dict{Id("Name"): Id("name"), Id("Uri"): Id("uri")}),
		})),
	)
	f.Line()

	f.Comment("ResourceBlock wraps an embedded resource as a content block.")
	f.Func().Id("ResourceBlock").Params(Id("res").Id("EmbeddedResource")).Id("ContentBlock").Block(
		Var().Id("r").Id("EmbeddedResource").Op("=").Id("res"),
		Return(Id("ContentBlock").Values(Dict{
			Id("Type"):     Lit("resource"),
			Id("Resource"): Op("&").Id("r"),
		})),
	)
	f.Line()

	// ToolCall content helpers
	f.Comment("ToolContent wraps a content block as tool-call content.")
	f.Func().Id("ToolContent").Params(Id("block").Id("ContentBlock")).Id("ToolCallContent").Block(
		Var().Id("b").Id("ContentBlock").Op("=").Id("block"),
		Return(Id("ToolCallContent").Values(Dict{
			Id("Type"):    Lit("content"),
			Id("Content"): Op("&").Id("b"),
		})),
	)
	f.Line()

	f.Comment("ToolDiffContent constructs a diff tool-call content. If oldText is omitted, the field is left empty.")
	f.Func().Id("ToolDiffContent").Params(Id("path").String(), Id("newText").String(), Id("oldText").Op("...").String()).Id("ToolCallContent").Block(
		Var().Id("o").Op("*").String(),
		If(Id("len").Call(Id("oldText")).Op(">").Lit(0)).Block(
			Id("o").Op("=").Op("&").Id("oldText").Index(Lit(0)),
		),
		Return(Id("ToolCallContent").Values(Dict{
			Id("Type"): Lit("diff"),
			Id("Diff"): Op("&").Id("DiffContent").Values(Dict{
				Id("Path"):    Id("path"),
				Id("NewText"): Id("newText"),
				Id("OldText"): Id("o"),
			}),
		})),
	)
	f.Line()

	f.Comment("ToolTerminalRef constructs a terminal reference tool-call content.")
	f.Func().Id("ToolTerminalRef").Params(Id("terminalId").String()).Id("ToolCallContent").Block(
		Return(Id("ToolCallContent").Values(Dict{
			Id("Type"):     Lit("terminal"),
			Id("Terminal"): Op("&").Id("TerminalRef").Values(Dict{Id("TerminalId"): Id("terminalId")}),
		})),
	)
	f.Line()

	// Generic pointer helper
	f.Comment("Ptr returns a pointer to v.")
	f.Func().Id("Ptr").Types(Id("T").Any()).Params(Id("v").Id("T")).Op("*").Id("T").Block(
		Return(Op("&").Id("v")),
	)

	var buf bytes.Buffer
	if err := f.Render(&buf); err != nil {
		return err
	}
	return os.WriteFile(filepath.Join(outDir, "helpers_gen.go"), buf.Bytes(), 0o644)
}
