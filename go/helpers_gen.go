// Code generated by acp-go-generator; DO NOT EDIT.

package acp

// TextBlock constructs a text content block.
func TextBlock(text string) ContentBlock {
	return ContentBlock{
		Text: &TextContent{Text: text},
		Type: "text",
	}
}

// ImageBlock constructs an inline image content block with base64-encoded data.
func ImageBlock(data string, mimeType string) ContentBlock {
	return ContentBlock{
		Image: &ImageContent{
			Data:     data,
			MimeType: mimeType,
		},
		Type: "image",
	}
}

// AudioBlock constructs an inline audio content block with base64-encoded data.
func AudioBlock(data string, mimeType string) ContentBlock {
	return ContentBlock{
		Audio: &AudioContent{
			Data:     data,
			MimeType: mimeType,
		},
		Type: "audio",
	}
}

// ResourceLinkBlock constructs a resource_link content block with a name and URI.
func ResourceLinkBlock(name string, uri string) ContentBlock {
	return ContentBlock{
		ResourceLink: &ResourceLinkContent{
			Name: name,
			Uri:  uri,
		},
		Type: "resource_link",
	}
}

// ResourceBlock wraps an embedded resource as a content block.
func ResourceBlock(res EmbeddedResource) ContentBlock {
	var r EmbeddedResource = res
	return ContentBlock{
		Resource: &r,
		Type:     "resource",
	}
}

// ToolContent wraps a content block as tool-call content.
func ToolContent(block ContentBlock) ToolCallContent {
	return ToolCallContent{Content: &ToolCallContentContent{
		Content: block,
		Type:    "content",
	}}
}

// ToolDiffContent constructs a diff tool-call content. If oldText is omitted, the field is left empty.
func ToolDiffContent(path string, newText string, oldText ...string) ToolCallContent {
	var o *string
	if len(oldText) > 0 {
		o = &oldText[0]
	}
	return ToolCallContent{Diff: &ToolCallContentDiff{
		NewText: newText,
		OldText: o,
		Path:    path,
		Type:    "diff",
	}}
}

// ToolTerminalRef constructs a terminal reference tool-call content.
func ToolTerminalRef(terminalId string) ToolCallContent {
	return ToolCallContent{Terminal: &ToolCallContentTerminal{
		TerminalId: terminalId,
		Type:       "terminal",
	}}
}

// Ptr returns a pointer to v.
func Ptr[T any](v T) *T {
	return &v
}
