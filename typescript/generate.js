#!/usr/bin/env node

import { compile } from "json-schema-to-typescript";
import { generate } from "ts-to-zod";
import fs from "fs";

const jsonSchema = JSON.parse(fs.readFileSync("./schema/schema.json", "utf8"));
const metadata = JSON.parse(fs.readFileSync("./schema/meta.json", "utf8"));

const tsSrc = await compile(jsonSchema, "Agent Client Protocol", {
  additionalProperties: false,
  bannerComment: false,
});

fs.writeFileSync("typescript/raw-schema.d.ts", tsSrc, "utf8");

const zodGenerator = generate({ sourceText: tsSrc, bannerComment: false });
const zodSchemas = zodGenerator.getZodSchemasFile();
const zodInfer = zodGenerator.getInferredTypes("./zod");

const schemaTs = `
export const AGENT_METHODS = ${JSON.stringify(metadata.agentMethods, null, 2)};

export const CLIENT_METHODS = ${JSON.stringify(metadata.clientMethods, null, 2)};

export const PROTOCOL_VERSION = ${metadata.version};

import { z } from "zod";

${fixGeneratedZod(zodInfer)}

${fixGeneratedZod(zodSchemas)}
`;

function fixGeneratedZod(src) {
  return src.replace(`// Generated by ts-to-zod\nimport { z } from "zod";\n`, "")
    .replace(`import * as generated from "./zod";\n`, "")
    .replace(/typeof generated./g, "typeof ");
}

fs.writeFileSync("typescript/schema.ts", schemaTs, "utf8");
