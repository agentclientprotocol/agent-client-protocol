#!/usr/bin/env python3

import subprocess
import os

def main():
    subprocess.run(["uv", "run", "ts2python", "typescript/raw-schema.d.ts", "--compatibility", "3.13", "--out", "python/"], check=True)

    with open('python/raw-schema.d.py', 'r', encoding='utf-8') as f:
        content = f.read()

    begin_marker = "##### BEGIN OF ts2python generated code"
    end_marker = "##### END OF ts2python generated code"

    begin_index = content.find(begin_marker)
    end_index = content.find(end_marker)

    if begin_index == -1:
        raise ValueError(f"Could not find begin marker: {begin_marker}")

    if end_index == -1:
        raise ValueError(f"Could not find end marker: {end_marker}")

    begin_index = content.find('\n', begin_index) + 1  # Skip to next line after begin marker
    extracted_code = content[begin_index:end_index].rstrip()

    old_line = "EmbeddedResourceResource = 'TextResourceContents | BlobResourceContents'"
    new_line = "EmbeddedResourceResource = Union['TextResourceContents', 'BlobResourceContents']"

    patched_code = extracted_code.replace(old_line, new_line)

    if patched_code == extracted_code:
        raise ValueError(f"Could not find expected line to patch: {old_line}")

    # write file with patched_code
    with open('python/schema.py', 'w', encoding='utf-8') as file:
        file.write("# Generated by generate.py which uses ts2python.\n\n")
        file.write("from enum import Enum, IntEnum\n")
        file.write("from typing import Union, Optional, Any, Generic, TypeVar, Callable, List, Tuple, Dict, TypedDict, NotRequired, Literal, Iterable, Iterator\n")
        file.write(patched_code)

    os.remove('python/raw-schema.d.py')

if __name__ == "__main__":
    main()
