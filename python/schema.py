# File generated by `generate.py` which uses ts2python.

from enum import Enum, IntEnum
from typing import Union, Optional, Any, Generic, TypeVar, Callable, List, Tuple, Dict, TypedDict, NotRequired, Literal, Iterable, Iterator


AGENT_METHODS = {
    "authenticate": "authenticate",
    "initialize": "initialize",
    "session_cancel": "session/cancel",
    "session_load": "session/load",
    "session_new": "session/new",
    "session_prompt": "session/prompt"
}

CLIENT_METHODS = {
    "fs_read_text_file": "fs/read_text_file",
    "fs_write_text_file": "fs/write_text_file",
    "session_request_permission": "session/request_permission",
    "session_update": "session/update"
}

PROTOCOL_VERSION = 1


type AgentClientProtocol = 'ClientRequest | ClientResponse | ClientNotification | AgentRequest | AgentResponse | AgentNotification'


# Requests the agent sends to the client

type ClientRequest = 'WriteTextFileRequest | ReadTextFileRequest | RequestPermissionRequest'

type PermissionOptionKind = Literal["allow_once", "allow_always", "reject_once", "reject_always"]

class ToolCallContent_0(TypedDict):
    content: 'ContentBlock'
    type: Literal["content"]
class ToolCallContent_1(TypedDict):
    newText: str
    oldText: str | None
    path: str
    type: Literal["diff"]
type ToolCallContent = ToolCallContent_0 | ToolCallContent_1

class ContentBlock_0(TypedDict):
    annotations: NotRequired['Annotations | None']
    text: str
    type: Literal["text"]
class ContentBlock_1(TypedDict):
    annotations: NotRequired['Annotations | None']
    data: str
    mimeType: str
    type: Literal["image"]
class ContentBlock_2(TypedDict):
    annotations: NotRequired['Annotations | None']
    data: str
    mimeType: str
    type: Literal["audio"]
class ContentBlock_3(TypedDict):
    annotations: NotRequired['Annotations | None']
    description: NotRequired[str | None]
    mimeType: NotRequired[str | None]
    name: str
    size: NotRequired[float | None]
    title: NotRequired[str | None]
    type: Literal["resource_link"]
    uri: str
class ContentBlock_4(TypedDict):
    annotations: NotRequired['Annotations | None']
    resource: 'EmbeddedResourceResource'
    type: Literal["resource"]
type ContentBlock = ContentBlock_0 | ContentBlock_1 | ContentBlock_2 | ContentBlock_3 | ContentBlock_4


# The sender or recipient of messages and data in a conversation.

type Role = Literal["assistant", "user"]

type EmbeddedResourceResource = 'TextResourceContents | BlobResourceContents'

type ToolKind = Literal["read", "edit", "delete", "move", "search", "execute", "think", "fetch", "other"]

type ToolCallStatus = Literal["pending", "in_progress", "completed", "failed"]


# Responses the client sends to the agent

type ClientResponse = 'WriteTextFileResponse | ReadTextFileResponse | RequestPermissionResponse'

type WriteTextFileResponse = None

class RequestPermissionOutcome_0(TypedDict):
    outcome: Literal["cancelled"]
class RequestPermissionOutcome_1(TypedDict):
    optionId: str
    outcome: Literal["selected"]
type RequestPermissionOutcome = RequestPermissionOutcome_0 | RequestPermissionOutcome_1


# Notifications the client sends to the agent

type ClientNotification = 'CancelNotification'


# Requests the client sends to the agent

type AgentRequest = 'InitializeRequest | AuthenticateRequest | NewSessionRequest | LoadSessionRequest | PromptRequest'


# Responses the agent sends to the client

type AgentResponse = 'InitializeResponse | AuthenticateResponse | NewSessionResponse | LoadSessionResponse | PromptResponse'

type AuthenticateResponse = None

type LoadSessionResponse = None

type PromptResponse = None


# Notifications the agent sends to the client

type AgentNotification = 'SessionNotification'

class SessionUpdate_0(TypedDict):
    content: 'ContentBlock'
    sessionUpdate: Literal["user_message_chunk"]
class SessionUpdate_1(TypedDict):
    content: 'ContentBlock'
    sessionUpdate: Literal["agent_message_chunk"]
class SessionUpdate_2(TypedDict):
    content: 'ContentBlock'
    sessionUpdate: Literal["agent_thought_chunk"]
class SessionUpdate_3(TypedDict):
    content: NotRequired[List['ToolCallContent']]
    kind: 'ToolKind'
    locations: NotRequired[List['ToolCallLocation']]
    rawInput: NotRequired[Any]
    sessionUpdate: Literal["tool_call"]
    status: 'ToolCallStatus'
    title: str
    toolCallId: str
class SessionUpdate_4(TypedDict):
    content: NotRequired[List['ToolCallContent'] | None]
    kind: NotRequired['ToolKind | None']
    locations: NotRequired[List['ToolCallLocation'] | None]
    rawInput: NotRequired[Any]
    sessionUpdate: Literal["tool_call_update"]
    status: NotRequired['ToolCallStatus | None']
    title: NotRequired[str | None]
    toolCallId: str
class SessionUpdate_5(TypedDict):
    entries: List['PlanEntry']
    sessionUpdate: Literal["plan"]
type SessionUpdate = SessionUpdate_0 | SessionUpdate_1 | SessionUpdate_2 | SessionUpdate_3 | SessionUpdate_4 | SessionUpdate_5


class WriteTextFileRequest(TypedDict):
    content: str
    path: str
    sessionId: str


class ReadTextFileRequest(TypedDict):
    limit: NotRequired[float | None]
    line: NotRequired[float | None]
    path: str
    sessionId: str


class RequestPermissionRequest(TypedDict):
    options: List['PermissionOption']
    sessionId: str
    toolCall: 'ToolCall'


class PermissionOption(TypedDict):
    kind: 'PermissionOptionKind'
    name: str
    optionId: str


class ToolCall(TypedDict):
    content: NotRequired[List['ToolCallContent']]
    kind: 'ToolKind'
    locations: NotRequired[List['ToolCallLocation']]
    rawInput: NotRequired[Any]
    status: 'ToolCallStatus'
    title: str
    toolCallId: str


# Optional annotations for the client. The client can use annotations to inform how objects are used or displayed


class Annotations(TypedDict):
    audience: NotRequired[List['Role'] | None]
    lastModified: NotRequired[str | None]
    priority: NotRequired[float | None]


class TextResourceContents(TypedDict):
    mimeType: NotRequired[str | None]
    text: str
    uri: str


class BlobResourceContents(TypedDict):
    blob: str
    mimeType: NotRequired[str | None]
    uri: str


class ToolCallLocation(TypedDict):
    line: NotRequired[float | None]
    path: str


class ReadTextFileResponse(TypedDict):
    content: str


class RequestPermissionResponse(TypedDict):
    outcome: 'RequestPermissionOutcome'


class CancelNotification(TypedDict):
    sessionId: str


class InitializeRequest(TypedDict):
    clientCapabilities: 'ClientCapabilities'

    # The latest protocol version supported by the client
    protocolVersion: float


# Capabilities supported by the client


class ClientCapabilities(TypedDict):
    fs: 'FileSystemCapability'


# FileSystem capabilities supported by the client.


class FileSystemCapability(TypedDict):
    readTextFile: bool

    # Client supports `fs/write_text_file`
    writeTextFile: bool


class AuthenticateRequest(TypedDict):
    methodId: str


class NewSessionRequest(TypedDict):
    cwd: str
    mcpServers: List['McpServer']


class McpServer(TypedDict):
    args: List[str]
    command: str
    env: List['EnvVariable']
    name: str


class EnvVariable(TypedDict):
    name: str
    value: str


class LoadSessionRequest(TypedDict):
    cwd: str
    mcpServers: List[McpServer]
    sessionId: str


class PromptRequest(TypedDict):
    prompt: List['ContentBlock']
    sessionId: str


class InitializeResponse(TypedDict):
    agentCapabilities: 'AgentCapabilities'

    # Authentication methods supported by the agent
    authMethods: List['AuthMethod']

    # The protocol version the client specified if supported by the agent,
    # or the latest protocol version supported by the agent.

    # The client should disconnect, if it doesn't support this version.
    protocolVersion: float


# Capabilities supported by the agent


class AgentCapabilities(TypedDict):
    loadSession: bool


class AuthMethod(TypedDict):
    description: str | None
    id: str
    name: str


class NewSessionResponse(TypedDict):
    sessionId: str


class SessionNotification(TypedDict):
    sessionId: str
    update: 'SessionUpdate'


# A single entry in the execution plan.

# Represents a task or goal that the assistant intends to accomplish
# as part of fulfilling the user's request.


class PlanEntry(TypedDict):
    content: str

    # Relative importance of this task
    priority: Literal["high", "medium", "low"]

    # Current progress of this task
    status: Literal["pending", "in_progress", "completed"]